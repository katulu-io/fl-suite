# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from spire.api.server.entry.v1 import entry_pb2 as spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2
from spire.api.types import entry_pb2 as spire_dot_api_dot_types_dot_entry__pb2


class EntryStub(object):
    """Manages registration entries stored by the SPIRE Server.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CountEntries = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/CountEntries',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.CountEntriesRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.CountEntriesResponse.FromString,
                )
        self.ListEntries = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/ListEntries',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.ListEntriesRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.ListEntriesResponse.FromString,
                )
        self.GetEntry = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/GetEntry',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetEntryRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_types_dot_entry__pb2.Entry.FromString,
                )
        self.BatchCreateEntry = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/BatchCreateEntry',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchCreateEntryRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchCreateEntryResponse.FromString,
                )
        self.BatchUpdateEntry = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/BatchUpdateEntry',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchUpdateEntryRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchUpdateEntryResponse.FromString,
                )
        self.BatchDeleteEntry = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/BatchDeleteEntry',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchDeleteEntryRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchDeleteEntryResponse.FromString,
                )
        self.GetAuthorizedEntries = channel.unary_unary(
                '/spire.api.server.entry.v1.Entry/GetAuthorizedEntries',
                request_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetAuthorizedEntriesRequest.SerializeToString,
                response_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetAuthorizedEntriesResponse.FromString,
                )


class EntryServicer(object):
    """Manages registration entries stored by the SPIRE Server.
    """

    def CountEntries(self, request, context):
        """Count entries.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListEntries(self, request, context):
        """Lists entries.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetEntry(self, request, context):
        """Gets an entry. If the entry does not exist, NOT_FOUND is returned.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchCreateEntry(self, request, context):
        """Batch creates one or more entries.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchUpdateEntry(self, request, context):
        """Batch updates one or more entries.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def BatchDeleteEntry(self, request, context):
        """Batch deletes one or more entries.

        The caller must be local or present an admin X509-SVID.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetAuthorizedEntries(self, request, context):
        """Gets the entries the caller is authorized for.

        The caller must present an active agent X509-SVID. See the Agent
        AttestAgent/RenewAgent RPCs.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EntryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CountEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.CountEntries,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.CountEntriesRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.CountEntriesResponse.SerializeToString,
            ),
            'ListEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.ListEntries,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.ListEntriesRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.ListEntriesResponse.SerializeToString,
            ),
            'GetEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEntry,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetEntryRequest.FromString,
                    response_serializer=spire_dot_api_dot_types_dot_entry__pb2.Entry.SerializeToString,
            ),
            'BatchCreateEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchCreateEntry,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchCreateEntryRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchCreateEntryResponse.SerializeToString,
            ),
            'BatchUpdateEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchUpdateEntry,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchUpdateEntryRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchUpdateEntryResponse.SerializeToString,
            ),
            'BatchDeleteEntry': grpc.unary_unary_rpc_method_handler(
                    servicer.BatchDeleteEntry,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchDeleteEntryRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchDeleteEntryResponse.SerializeToString,
            ),
            'GetAuthorizedEntries': grpc.unary_unary_rpc_method_handler(
                    servicer.GetAuthorizedEntries,
                    request_deserializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetAuthorizedEntriesRequest.FromString,
                    response_serializer=spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetAuthorizedEntriesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'spire.api.server.entry.v1.Entry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Entry(object):
    """Manages registration entries stored by the SPIRE Server.
    """

    @staticmethod
    def CountEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/CountEntries',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.CountEntriesRequest.SerializeToString,
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.CountEntriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/ListEntries',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.ListEntriesRequest.SerializeToString,
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.ListEntriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/GetEntry',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetEntryRequest.SerializeToString,
            spire_dot_api_dot_types_dot_entry__pb2.Entry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchCreateEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/BatchCreateEntry',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchCreateEntryRequest.SerializeToString,
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchCreateEntryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchUpdateEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/BatchUpdateEntry',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchUpdateEntryRequest.SerializeToString,
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchUpdateEntryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def BatchDeleteEntry(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/BatchDeleteEntry',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchDeleteEntryRequest.SerializeToString,
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.BatchDeleteEntryResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetAuthorizedEntries(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/spire.api.server.entry.v1.Entry/GetAuthorizedEntries',
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetAuthorizedEntriesRequest.SerializeToString,
            spire_dot_api_dot_server_dot_entry_dot_v1_dot_entry__pb2.GetAuthorizedEntriesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
