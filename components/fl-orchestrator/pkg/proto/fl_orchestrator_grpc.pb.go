// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fl_orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlOrchestratorClient is the client API for FlOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlOrchestratorClient interface {
	Join(ctx context.Context, in *OperatorMessage, opts ...grpc.CallOption) (FlOrchestrator_JoinClient, error)
	GetTasks(ctx context.Context, in *OperatorMessage, opts ...grpc.CallOption) (*OrchestratorMessage, error)
}

type flOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewFlOrchestratorClient(cc grpc.ClientConnInterface) FlOrchestratorClient {
	return &flOrchestratorClient{cc}
}

func (c *flOrchestratorClient) Join(ctx context.Context, in *OperatorMessage, opts ...grpc.CallOption) (FlOrchestrator_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlOrchestrator_ServiceDesc.Streams[0], "/FlOrchestrator/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &flOrchestratorJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlOrchestrator_JoinClient interface {
	Recv() (*OrchestratorMessage, error)
	grpc.ClientStream
}

type flOrchestratorJoinClient struct {
	grpc.ClientStream
}

func (x *flOrchestratorJoinClient) Recv() (*OrchestratorMessage, error) {
	m := new(OrchestratorMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flOrchestratorClient) GetTasks(ctx context.Context, in *OperatorMessage, opts ...grpc.CallOption) (*OrchestratorMessage, error) {
	out := new(OrchestratorMessage)
	err := c.cc.Invoke(ctx, "/FlOrchestrator/GetTasks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlOrchestratorServer is the server API for FlOrchestrator service.
// All implementations must embed UnimplementedFlOrchestratorServer
// for forward compatibility
type FlOrchestratorServer interface {
	Join(*OperatorMessage, FlOrchestrator_JoinServer) error
	GetTasks(context.Context, *OperatorMessage) (*OrchestratorMessage, error)
	mustEmbedUnimplementedFlOrchestratorServer()
}

// UnimplementedFlOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedFlOrchestratorServer struct {
}

func (UnimplementedFlOrchestratorServer) Join(*OperatorMessage, FlOrchestrator_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedFlOrchestratorServer) GetTasks(context.Context, *OperatorMessage) (*OrchestratorMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTasks not implemented")
}
func (UnimplementedFlOrchestratorServer) mustEmbedUnimplementedFlOrchestratorServer() {}

// UnsafeFlOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlOrchestratorServer will
// result in compilation errors.
type UnsafeFlOrchestratorServer interface {
	mustEmbedUnimplementedFlOrchestratorServer()
}

func RegisterFlOrchestratorServer(s grpc.ServiceRegistrar, srv FlOrchestratorServer) {
	s.RegisterService(&FlOrchestrator_ServiceDesc, srv)
}

func _FlOrchestrator_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(OperatorMessage)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlOrchestratorServer).Join(m, &flOrchestratorJoinServer{stream})
}

type FlOrchestrator_JoinServer interface {
	Send(*OrchestratorMessage) error
	grpc.ServerStream
}

type flOrchestratorJoinServer struct {
	grpc.ServerStream
}

func (x *flOrchestratorJoinServer) Send(m *OrchestratorMessage) error {
	return x.ServerStream.SendMsg(m)
}

func _FlOrchestrator_GetTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OperatorMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlOrchestratorServer).GetTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlOrchestrator/GetTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlOrchestratorServer).GetTasks(ctx, req.(*OperatorMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// FlOrchestrator_ServiceDesc is the grpc.ServiceDesc for FlOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FlOrchestrator",
	HandlerType: (*FlOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTasks",
			Handler:    _FlOrchestrator_GetTasks_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _FlOrchestrator_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/fl_orchestrator.proto",
}
