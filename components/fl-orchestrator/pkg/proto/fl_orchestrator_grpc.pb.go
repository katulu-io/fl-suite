// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: pkg/proto/fl_orchestrator.proto

package fl_orchestrator

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FlOrchestratorClient is the client API for FlOrchestrator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FlOrchestratorClient interface {
	ListServers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (FlOrchestrator_ListServersClient, error)
	GetServers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error)
}

type flOrchestratorClient struct {
	cc grpc.ClientConnInterface
}

func NewFlOrchestratorClient(cc grpc.ClientConnInterface) FlOrchestratorClient {
	return &flOrchestratorClient{cc}
}

func (c *flOrchestratorClient) ListServers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (FlOrchestrator_ListServersClient, error) {
	stream, err := c.cc.NewStream(ctx, &FlOrchestrator_ServiceDesc.Streams[0], "/FlOrchestrator/ListServers", opts...)
	if err != nil {
		return nil, err
	}
	x := &flOrchestratorListServersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FlOrchestrator_ListServersClient interface {
	Recv() (*ServerResponse, error)
	grpc.ClientStream
}

type flOrchestratorListServersClient struct {
	grpc.ClientStream
}

func (x *flOrchestratorListServersClient) Recv() (*ServerResponse, error) {
	m := new(ServerResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *flOrchestratorClient) GetServers(ctx context.Context, in *ServersRequest, opts ...grpc.CallOption) (*GetServersResponse, error) {
	out := new(GetServersResponse)
	err := c.cc.Invoke(ctx, "/FlOrchestrator/GetServers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FlOrchestratorServer is the server API for FlOrchestrator service.
// All implementations must embed UnimplementedFlOrchestratorServer
// for forward compatibility
type FlOrchestratorServer interface {
	ListServers(*ServersRequest, FlOrchestrator_ListServersServer) error
	GetServers(context.Context, *ServersRequest) (*GetServersResponse, error)
	mustEmbedUnimplementedFlOrchestratorServer()
}

// UnimplementedFlOrchestratorServer must be embedded to have forward compatible implementations.
type UnimplementedFlOrchestratorServer struct {
}

func (UnimplementedFlOrchestratorServer) ListServers(*ServersRequest, FlOrchestrator_ListServersServer) error {
	return status.Errorf(codes.Unimplemented, "method ListServers not implemented")
}
func (UnimplementedFlOrchestratorServer) GetServers(context.Context, *ServersRequest) (*GetServersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServers not implemented")
}
func (UnimplementedFlOrchestratorServer) mustEmbedUnimplementedFlOrchestratorServer() {}

// UnsafeFlOrchestratorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FlOrchestratorServer will
// result in compilation errors.
type UnsafeFlOrchestratorServer interface {
	mustEmbedUnimplementedFlOrchestratorServer()
}

func RegisterFlOrchestratorServer(s grpc.ServiceRegistrar, srv FlOrchestratorServer) {
	s.RegisterService(&FlOrchestrator_ServiceDesc, srv)
}

func _FlOrchestrator_ListServers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServersRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FlOrchestratorServer).ListServers(m, &flOrchestratorListServersServer{stream})
}

type FlOrchestrator_ListServersServer interface {
	Send(*ServerResponse) error
	grpc.ServerStream
}

type flOrchestratorListServersServer struct {
	grpc.ServerStream
}

func (x *flOrchestratorListServersServer) Send(m *ServerResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _FlOrchestrator_GetServers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ServersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FlOrchestratorServer).GetServers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FlOrchestrator/GetServers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FlOrchestratorServer).GetServers(ctx, req.(*ServersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FlOrchestrator_ServiceDesc is the grpc.ServiceDesc for FlOrchestrator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FlOrchestrator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FlOrchestrator",
	HandlerType: (*FlOrchestratorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetServers",
			Handler:    _FlOrchestrator_GetServers_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListServers",
			Handler:       _FlOrchestrator_ListServers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "pkg/proto/fl_orchestrator.proto",
}
